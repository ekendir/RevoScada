using DevExpress.Xpf.WindowsUI;
using Revo.Core;
using RevoScada.DesktopApplication.Models.ModelEnums;
using RevoScada.DesktopApplication.ViewModels.CalibrationViewModels;
using RevoScada.Entities.PageTagConfigurations;
using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Windows;
using System.Windows.Threading;

namespace RevoScada.DesktopApplication.Views.CalibrationViews
{
    /// <summary>
    /// Interaction logic for CalibrationCertificationType1.xaml
    /// </summary>
    public partial class CalibrationCertificationWindow : Window
    {
        private CalibrationCertificationVM _viewModel;
        public static CalibrationSensorType CalibrationSensorType = CalibrationSensorType.PTC;
        private readonly DispatcherTimer _dispatcherTimer = new DispatcherTimer();
        public CalibrationCertificationWindow(Dictionary<CalibrationSensorType, short> sensorCounts, List<KeyValuePair<CalibrationSensorType, string>> sensorsWithName, CalibrationTagConfigurations calibrationTagConfigurations)
        {
            InitializeComponent();
            _viewModel = DataContext as CalibrationCertificationVM;
            _viewModel.CalibrationTagConfigurations = calibrationTagConfigurations;
            _viewModel.FirstTimeInitialization(sensorCounts, sensorsWithName);
            _viewModel.IsRawValueCycleActivated = true;
            _dispatcherTimer.Interval = TimeSpan.FromSeconds(1);
            _dispatcherTimer.Tick += ContinuousTimer_Tick; 
        }
        private void ContinuousTimer_Tick(object sender, EventArgs e)
        {
            if (_viewModel.IsRawValueCycleActivated)
            {
                _viewModel.UpdateCalibrationSensorRawValues();

                if (_viewModel.IsRawValueCycleActivated && _viewModel.IsUpdateCheckValueCycleActivated == true)
                {
                    try
                    {
                        _viewModel.UpdateCalibrationSensorValues();
                    }
                    catch (Exception ex)
                    {
                        LogManager.Instance.Log($"Update Sensor check values {ex.Message}]", LogType.Error);
                    }
                }
            }
        }
        private void CalibrationCertificateGrid_Loaded(object sender, RoutedEventArgs e)
        {
            this.SensorTypeComboBox.SelectedIndexChanged += new System.Windows.RoutedEventHandler(this.SensorTypeComboBox_SelectedIndexChanged);
            _viewModel.FillSensorValues();
            CalibrationCertificateGrid.ItemsSource = _viewModel.CalibrationSensorValueIntervalDataTable;

            /*

            this.CalibrationGridTableView.AutoWidth = false;
            foreach (var item in CalibrationCertificateGrid.Columns)
            {
                item.FixedWidth = false;
            }

            this.CalibrationGridTableView.BestFitColumns();

            //   this.CalibrationCertificateGrid.Columns.Last().MinWidth = this.CalibrationGridTableView.CalcColumnBestFitWidth(this.CalibrationCertificateGrid.Columns.Last()); this.CalibrationCertificateGrid.Columns.Take(this.CalibrationCertificateGrid.Columns.Count - 1).ForEach(c => c.FixedWidth = true);
            //  this.CalibrationGridTableView.AutoWidth = true;

            //todo:l refactor hard coded screen resolution
            CalibrationCertificateGrid.Width = 1840;
            CalibrationCertificateGrid.Height = 1000;*/

            _dispatcherTimer.Start();
        }
        private void CalibrationCertificateGrid_AutoGeneratedColumns(object sender, RoutedEventArgs e)
        {/*
            DataTable table = CalibrationSensorValueIntervalDataTable;
            foreach (GridColumn column in CalibrationCertificateGrid.Columns)
            {
                if (table.Columns.Contains(column.FieldName))
                {
                    string caption = table.Columns[column.FieldName].Caption;
                    if (caption != null)
                    {
                        column.Header = caption;
                        CalibrationCertificateGrid.Columns[column.FieldName].Width = 70;
                    }
                }
            }
            CalibrationCertificateGrid.Columns[0].Width = 200;*/
        }
        private void SensorTypeComboBox_SelectedIndexChanged(object sender, RoutedEventArgs e)
        {
            _viewModel.CalibrationCertificationParameters.SelectedCalibrationSensorType = ((KeyValuePair<CalibrationSensorType, string>)SensorTypeComboBox.SelectedItem).Key;

            switch (_viewModel.CalibrationCertificationParameters.SelectedCalibrationSensorType)
            {
                case CalibrationSensorType.PTC:
                case CalibrationSensorType.MON:
                    _viewModel.CalibrationCertificationPageControls.SensorRangeSelectorVisibility = Visibility.Visible;
                    break;
                default:
                    _viewModel.CalibrationCertificationPageControls.SensorRangeSelectorVisibility = Visibility.Collapsed;
                    break;
            }

            _viewModel.ChangeSelectedCalibrationCertificationCheckSettings(_viewModel.CalibrationCertificationParameters.SelectedCalibrationSensorType);
            _viewModel.CreateEmptyTable();
            _viewModel.FillSensorValues();
            CalibrationCertificateGrid.ItemsSource = _viewModel.CalibrationSensorValueIntervalDataTable;
        }
        private void SaveParameters_Click(object sender, RoutedEventArgs e)
        {
            _viewModel.SaveSelectedCalibrationCertificationCheckSettings();
            CalibrationCertificateGrid.ItemsSource = _viewModel.CalibrationSensorValueIntervalDataTable;
        }
        private void StartChecking_Click(object sender, RoutedEventArgs e)
        {
            _viewModel.IsRawValueCycleActivated = true;
            _viewModel.CalibrationCertificationPageControls.IsSensorTypeSelectorEnabled = false;
            if (_viewModel.CalibrationCertificationParameters.IsParametersSaved)
            {
                _viewModel.InitializeBeforeCheckStart();
                _viewModel.StartChecking();
                _viewModel.IsUpdateCheckValueCycleActivated = true;
            }
        }
        private void StopChecking_Click(object sender, RoutedEventArgs e)
        {
            Dispatcher.BeginInvoke(new Action(() =>
            {
                _viewModel.ResetSuccessUpdateCalibrationSensorValues();
                _viewModel.StopChecking();
                _viewModel.CalibrationCertificationPageControls.IsSensorTypeSelectorEnabled = true;
            }), DispatcherPriority.Background);
        }
        private void ResetAllCheck_Click(object sender, RoutedEventArgs e)
        {
            MessageBoxResult dialogResult = WinUIMessageBox.Show($"Are you sure to reset all check results?", "", MessageBoxButton.YesNo, MessageBoxImage.Question);

            if (dialogResult == MessageBoxResult.Yes)
            {
                _viewModel.ResetAll();
                CalibrationCertificateGrid.ItemsSource = new DataTable();
            }
        }
        private void ResetAllForTypeCheck_Click(object sender, RoutedEventArgs e)
        {
            MessageBoxResult dialogResult = WinUIMessageBox.Show($"Are you sure to reset all check results?", "", MessageBoxButton.YesNo, MessageBoxImage.Question);

            if (dialogResult == MessageBoxResult.Yes)
            {
                _viewModel.ResetBySelectedType();
                CalibrationCertificateGrid.ItemsSource = new DataTable();
            }
        }
        private void ExportToPDF_ItemClick(object sender, DevExpress.Xpf.Bars.ItemClickEventArgs e)
        {
            System.Windows.Forms.FolderBrowserDialog folderBrowserDialog = new System.Windows.Forms.FolderBrowserDialog();
            System.Windows.Forms.OpenFileDialog openFileDialog = new System.Windows.Forms.OpenFileDialog();
            System.Windows.Forms.DialogResult result = folderBrowserDialog.ShowDialog();

            if (result == System.Windows.Forms.DialogResult.OK)
            {
                DirectoryInfo directoryInfo = new DirectoryInfo(folderBrowserDialog.SelectedPath);
                string fileName = $"CalibrationCertificationRawData_{_viewModel.CalibrationCertificationParameters.SelectedCalibrationSensorType}_{ DateTime.Now:yyyy-MM-dd_hhmm_sss}.pdf";

                if (!directoryInfo.Exists)
                {
                    directoryInfo.Create();
                }

                CalibrationCertificateGrid.View.ExportToPdf(Path.Combine(directoryInfo.FullName, fileName));
            }
        }
        private void ExportToExcel_ItemClick(object sender, DevExpress.Xpf.Bars.ItemClickEventArgs e)
        {
            System.Windows.Forms.FolderBrowserDialog folderBrowserDialog = new System.Windows.Forms.FolderBrowserDialog();
            System.Windows.Forms.OpenFileDialog openFileDialog = new System.Windows.Forms.OpenFileDialog();
            System.Windows.Forms.DialogResult result = folderBrowserDialog.ShowDialog();

            if (result == System.Windows.Forms.DialogResult.OK)
            {
                DirectoryInfo directoryInfo = new DirectoryInfo(folderBrowserDialog.SelectedPath);
                string fileName = $"CalibrationCertificationRawData_{_viewModel.CalibrationCertificationParameters.SelectedCalibrationSensorType}_{ DateTime.Now:yyyy-MM-dd_hhmm_sss}.xlsx";

                if (!directoryInfo.Exists)
                {
                    directoryInfo.Create();
                }

                CalibrationCertificateGrid.View.ExportToXlsx(Path.Combine(directoryInfo.FullName, fileName));
            }
        }
        private void ResetSelectedSensorCheckValue_ItemClick(object sender, DevExpress.Xpf.Bars.ItemClickEventArgs e)
        {
            int maxIndex = (CalibrationCertificateGrid.Columns.Count-3)/2+2-1;
            int minIndex = 2;

            Dictionary<int, List<int>> checkResultsToReset = new Dictionary<int, List<int>>();

            foreach (var cell in CalibrationGridTableView.GetSelectedCells())
            {
                if (!checkResultsToReset.ContainsKey(cell.RowHandle))
                {
                    checkResultsToReset.Add(cell.RowHandle, new List<int>());
                }

                if (cell.Column.VisibleIndex>=minIndex &&  cell.Column.VisibleIndex<=maxIndex)
                {
                    var selectedCellsInRow = checkResultsToReset[cell.RowHandle];
                    selectedCellsInRow.Add(cell.Column.VisibleIndex);
                    checkResultsToReset[cell.RowHandle] = selectedCellsInRow;
                }
            }
            _viewModel.ResetStabilityChecks(checkResultsToReset);
        }
        private void Window_Unloaded(object sender, RoutedEventArgs e)
        {
            try
            {
                _dispatcherTimer.Stop();
            }
            catch (Exception ex)
            {
            }
        }
        private void TextEditTolerance_KeyDown(object sender, System.Windows.Input.KeyEventArgs e)
        {
            _viewModel.CalibrationCertificationParameters.SelectedCalibrationCertificationCheckSettings.IsSaveEnabled =true;
            _viewModel.CalibrationCertificationParameters.SelectedCalibrationCertificationCheckSettings.IsSettingsSaved = false;
            _viewModel.CalibrationCertificationPageControls.IsStartButtonEnabled = false;
        }
    }
}



//namespace RevoScada.DesktopApplication.Views.CalibrationViews
//{
//    /// <summary>
//    /// Interaction logic for CalibrationCertificationType1.xaml
//    /// </summary>
//    public partial class CalibrationCertificationWindow : Window
//    {
//        private CalibrationCertificationVM _viewModel;
//        public static CalibrationSensorType CalibrationSensorType = CalibrationSensorType.PTC;
//        DispatcherTimer _dispatcherTimer = new DispatcherTimer();
//        public CalibrationCertificationWindow(Dictionary<CalibrationSensorType, short> sensorCounts, List<KeyValuePair<CalibrationSensorType, string>> sensorsWithName, CalibrationTagConfigurations calibrationTagConfigurations)
//        {
//            InitializeComponent();
//            _viewModel = DataContext as CalibrationCertificationVM;
//            _viewModel.CalibrationTagConfigurations = calibrationTagConfigurations;
//            _viewModel.FirstTimeInitialization(sensorCounts, sensorsWithName);
//            _viewModel.IsRawValueCycleActivated = true;
//            _dispatcherTimer.Interval = TimeSpan.FromSeconds(1);
//            _dispatcherTimer.Tick += ContinuousTimer_Tick; ;
//        }
//        private void ContinuousTimer_Tick(object sender, EventArgs e)
//        {

//            if (_viewModel.IsRawValueCycleActivated)
//            {
//                _viewModel.UpdateCalibrationSensorRawValues();

//                if (_viewModel.IsRawValueCycleActivated && _viewModel.IsUpdateCheckValueCycleActivated == true)
//                {
//                    if (_viewModel.RemainingTime == 0)
//                    {
//                        _viewModel.IsUpdateCheckValueCycleActivated = false;
//                        _viewModel.StopChecking();
//                        _viewModel.CalibrationCertificationPageControls.IsSensorTypeSelectorEnabled = true;
//                    }
//                    else
//                    {
//                        if (_viewModel.IsRawValueCycleActivated && _viewModel.IsUpdateCheckValueCycleActivated == true)
//                        {
//                            try
//                            {
//                                _viewModel.UpdateCalibrationSensorValues();
//                            }
//                            catch (Exception ex)
//                            {
//                                LogManager.Instance.Log($"Update Sensor check values {ex.Message}]", LogType.Error);
//                            }
//                        }
//                    }
//                }
//            }
//        }
//        private void CalibrationCertificateGrid_Loaded(object sender, RoutedEventArgs e)
//        {
//            this.SensorTypeComboBox.SelectedIndexChanged += new System.Windows.RoutedEventHandler(this.SensorTypeComboBox_SelectedIndexChanged);
//            _viewModel.FillSensorValues();
//            CalibrationCertificateGrid.ItemsSource = _viewModel.CalibrationSensorValueIntervalDataTable;

//            /*

//            this.CalibrationGridTableView.AutoWidth = false;
//            foreach (var item in CalibrationCertificateGrid.Columns)
//            {
//                item.FixedWidth = false;
//            }

//            this.CalibrationGridTableView.BestFitColumns();

//            //   this.CalibrationCertificateGrid.Columns.Last().MinWidth = this.CalibrationGridTableView.CalcColumnBestFitWidth(this.CalibrationCertificateGrid.Columns.Last()); this.CalibrationCertificateGrid.Columns.Take(this.CalibrationCertificateGrid.Columns.Count - 1).ForEach(c => c.FixedWidth = true);
//            //  this.CalibrationGridTableView.AutoWidth = true;

//            //todo:l refactor hard coded screen resolution
//            CalibrationCertificateGrid.Width = 1840;
//            CalibrationCertificateGrid.Height = 1000;*/

//            _dispatcherTimer.Start();
//        }
//        private void CalibrationCertificateGrid_AutoGeneratedColumns(object sender, RoutedEventArgs e)
//        {/*
//            DataTable table = CalibrationSensorValueIntervalDataTable;
//            foreach (GridColumn column in CalibrationCertificateGrid.Columns)
//            {
//                if (table.Columns.Contains(column.FieldName))
//                {
//                    string caption = table.Columns[column.FieldName].Caption;
//                    if (caption != null)
//                    {
//                        column.Header = caption;
//                        CalibrationCertificateGrid.Columns[column.FieldName].Width = 70;
//                    }
//                }
//            }
//            CalibrationCertificateGrid.Columns[0].Width = 200;*/
//        }
//        private void SensorTypeComboBox_SelectedIndexChanged(object sender, RoutedEventArgs e)
//        {
//            _viewModel.CalibrationCertificationParameters.SelectedCalibrationSensorType = ((KeyValuePair<CalibrationSensorType, string>)SensorTypeComboBox.SelectedItem).Key;

//            switch (_viewModel.CalibrationCertificationParameters.SelectedCalibrationSensorType)
//            {
//                case CalibrationSensorType.PTC:
//                case CalibrationSensorType.MON:
//                    _viewModel.CalibrationCertificationPageControls.SensorRangeSelectorVisibility = Visibility.Visible;
//                    break;
//                default:
//                    _viewModel.CalibrationCertificationPageControls.SensorRangeSelectorVisibility = Visibility.Collapsed;
//                    _viewModel.CalibrationCertificationParameters.SelectedCalibrationCertificationCheckSettings.SequenceOfSensorRangeStartSelection = 1;
//                    _viewModel.CalibrationCertificationParameters.SelectedCalibrationCertificationCheckSettings.SequenceOfSensorRangeEndSelection = 1;
//                    break;
//            }

//            _viewModel.ChangeSelectedCalibrationCertificationCheckSettings(_viewModel.CalibrationCertificationParameters.SelectedCalibrationSensorType);
//            _viewModel.CreateEmptyTable();
//            _viewModel.FillSensorValues();
//            CalibrationCertificateGrid.ItemsSource = _viewModel.CalibrationSensorValueIntervalDataTable;
//        }
//        private void SaveParameters_Click(object sender, RoutedEventArgs e)
//        {
//            _viewModel.SaveSelectedCalibrationCertificationCheckSettings();
//            CalibrationCertificateGrid.ItemsSource = _viewModel.CalibrationSensorValueIntervalDataTable;
//        }
//        private void StartChecking_Click(object sender, RoutedEventArgs e)
//        {
//            _viewModel.IsRawValueCycleActivated = true;
//            _viewModel.CalibrationCertificationPageControls.IsSensorTypeSelectorEnabled = false;
//            if (_viewModel.CalibrationCertificationParameters.IsParametersSaved)
//            {
//                _viewModel.InitializeBeforeCheckStart();
//                _viewModel.StartChecking();
//                _viewModel.IsUpdateCheckValueCycleActivated = true;
//            }
//        }
//        private void StopChecking_Click(object sender, RoutedEventArgs e)
//        {
//            Dispatcher.BeginInvoke(new Action(() =>
//            {
//                _viewModel.ResetSuccessUpdateCalibrationSensorValues();
//                _viewModel.StopChecking();
//                _viewModel.CalibrationCertificationPageControls.IsSensorTypeSelectorEnabled = true;
//            }), DispatcherPriority.Background);
//        }
//        private void ResetAllCheck_Click(object sender, RoutedEventArgs e)
//        {
//            MessageBoxResult dialogResult = WinUIMessageBox.Show($"Are you sure to reset all check results?", "", MessageBoxButton.YesNo, MessageBoxImage.Question);

//            if (dialogResult == MessageBoxResult.Yes)
//            {
//                _viewModel.ResetAll();
//                CalibrationCertificateGrid.ItemsSource = new DataTable();
//            }
//        }
//        private void ResetAllForTypeCheck_Click(object sender, RoutedEventArgs e)
//        {
//            MessageBoxResult dialogResult = WinUIMessageBox.Show($"Are you sure to reset all check results?", "", MessageBoxButton.YesNo, MessageBoxImage.Question);

//            if (dialogResult == MessageBoxResult.Yes)
//            {
//                _viewModel.ResetBySelectedType();
//                CalibrationCertificateGrid.ItemsSource = new DataTable();
//            }
//        }
//        private void ExportToPDF_ItemClick(object sender, DevExpress.Xpf.Bars.ItemClickEventArgs e)
//        {
//            System.Windows.Forms.FolderBrowserDialog folderBrowserDialog = new System.Windows.Forms.FolderBrowserDialog();
//            System.Windows.Forms.OpenFileDialog openFileDialog = new System.Windows.Forms.OpenFileDialog();
//            System.Windows.Forms.DialogResult result = folderBrowserDialog.ShowDialog();

//            if (result == System.Windows.Forms.DialogResult.OK)
//            {
//                DirectoryInfo directoryInfo = new DirectoryInfo(folderBrowserDialog.SelectedPath);
//                string fileName = $"CalibrationCertificationRawData_{_viewModel.CalibrationCertificationParameters.SelectedCalibrationSensorType}_{ DateTime.Now:yyyy-MM-dd_hhmm_sss}.pdf";

//                if (!directoryInfo.Exists)
//                {
//                    directoryInfo.Create();
//                }

//                CalibrationCertificateGrid.View.ExportToPdf(Path.Combine(directoryInfo.FullName, fileName));
//            }
//        }
//        private void ExportToExcel_ItemClick(object sender, DevExpress.Xpf.Bars.ItemClickEventArgs e)
//        {
//            System.Windows.Forms.FolderBrowserDialog folderBrowserDialog = new System.Windows.Forms.FolderBrowserDialog();
//            System.Windows.Forms.OpenFileDialog openFileDialog = new System.Windows.Forms.OpenFileDialog();
//            System.Windows.Forms.DialogResult result = folderBrowserDialog.ShowDialog();

//            if (result == System.Windows.Forms.DialogResult.OK)
//            {
//                DirectoryInfo directoryInfo = new DirectoryInfo(folderBrowserDialog.SelectedPath);
//                string fileName = $"CalibrationCertificationRawData_{_viewModel.CalibrationCertificationParameters.SelectedCalibrationSensorType}_{ DateTime.Now:yyyy-MM-dd_hhmm_sss}.xlsx";

//                if (!directoryInfo.Exists)
//                {
//                    directoryInfo.Create();
//                }

//                CalibrationCertificateGrid.View.ExportToXlsx(Path.Combine(directoryInfo.FullName, fileName));
//            }
//        }
//        private void ResetSelectedSensorCheckValue_ItemClick(object sender, DevExpress.Xpf.Bars.ItemClickEventArgs e)
//        {
//            int maxIndex = (CalibrationCertificateGrid.Columns.Count - 3) / 2 + 2 - 1;
//            int minIndex = 2;

//            Dictionary<int, List<int>> checkResultsToReset = new Dictionary<int, List<int>>();

//            foreach (var cell in CalibrationGridTableView.GetSelectedCells())
//            {
//                if (!checkResultsToReset.ContainsKey(cell.RowHandle))
//                {
//                    checkResultsToReset.Add(cell.RowHandle, new List<int>());
//                }

//                if (cell.Column.VisibleIndex >= minIndex && cell.Column.VisibleIndex <= maxIndex)
//                {
//                    var selectedCellsInRow = checkResultsToReset[cell.RowHandle];
//                    selectedCellsInRow.Add(cell.Column.VisibleIndex);
//                    checkResultsToReset[cell.RowHandle] = selectedCellsInRow;
//                }
//            }
//            _viewModel.ResetStabilityChecks(checkResultsToReset);
//        }
//        private void Window_Unloaded(object sender, RoutedEventArgs e)
//        {
//            try
//            {
//                _dispatcherTimer.Stop();
//            }
//            catch (Exception ex)
//            {
//            }
//        }
//    }
//}